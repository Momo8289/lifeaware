name: Supabase Keep Alive

on:
  schedule:
    # Run twice a week (Monday and Thursday at midnight UTC)
    # This is frequent enough to prevent inactivity but conserves GitHub Actions minutes
    - cron: '0 0 * * 1,4'
  workflow_dispatch: # Allow manual triggering

jobs:
  keep-alive:
    runs-on: ubuntu-latest
    environment: Production  # Use your environment secrets
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install @supabase/supabase-js

      - name: Run Supabase Keep Alive
        run: |
          node << 'EOF'
          const { createClient } = require('@supabase/supabase-js');
          
          // Configuration
          const config = {
            name: "Lifeaware",
            supabaseUrl: process.env.SUPABASE_URL,
            supabaseKey: process.env.SUPABASE_ANON_KEY,
            tableName: "keep-alive",
            maxEntries: 50
          };
          
          function generateRandomString(length = 10) {
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            let result = '';
            for (let i = 0; i < length; i++) {
              result += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return result;
          }
          
          async function processDatabase() {
            console.log(`üîÑ Processing database: ${config.name}`);
            console.log(`üöÄ Starting Supabase Keep Alive - ${new Date().toISOString()}`);
            
            if (!config.supabaseUrl || !config.supabaseKey) {
              console.log(`‚ùå Missing URL or key for ${config.name}`);
              process.exit(1);
            }
            
            try {
              // Create Supabase client
              const supabase = createClient(config.supabaseUrl, config.supabaseKey);
              
              // Insert a new keep-alive entry
              const randomName = `github-action-${generateRandomString()}`;
              const { data: insertData, error: insertError } = await supabase
                .from(config.tableName)
                .insert({
                  name: randomName
                });
              
              if (insertError) {
                throw new Error(`Insert failed: ${insertError.message}`);
              }
              
              console.log(`‚úÖ Inserted entry: ${randomName}`);
              
              // Check current entry count
              const { count, error: countError } = await supabase
                .from(config.tableName)
                .select('id', { count: 'exact', head: true });
              
              if (countError) {
                throw new Error(`Count failed: ${countError.message}`);
              }
              
              console.log(`üìä Total entries in ${config.tableName}: ${count}`);
              
              // Clean up old entries if we exceed maxEntries
              if (count > config.maxEntries) {
                const entriesToDelete = count - config.maxEntries;
                
                // Get oldest entries to delete
                const { data: oldEntries, error: selectError } = await supabase
                  .from(config.tableName)
                  .select('id')
                  .order('created_at', { ascending: true })
                  .limit(entriesToDelete);
                
                if (selectError) {
                  throw new Error(`Select for cleanup failed: ${selectError.message}`);
                }
                
                if (oldEntries && oldEntries.length > 0) {
                  const idsToDelete = oldEntries.map(entry => entry.id);
                  
                  const { error: deleteError } = await supabase
                    .from(config.tableName)
                    .delete()
                    .in('id', idsToDelete);
                  
                  if (deleteError) {
                    throw new Error(`Delete failed: ${deleteError.message}`);
                  }
                  
                  console.log(`üßπ Cleaned up ${idsToDelete.length} old entries`);
                }
              }
              
              console.log(`üéâ Successfully processed ${config.name}`);
              console.log(`\nüìà Summary: Database processed successfully`);
              console.log(`üéâ Keep-alive completed successfully!`);
              
            } catch (error) {
              console.log(`‚ùå Error processing ${config.name}: ${error.message}`);
              process.exit(1);
            }
          }
          
          // Run the process
          processDatabase();
          EOF
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Cleanup
        run: |
          echo "üßπ Cleanup completed" 